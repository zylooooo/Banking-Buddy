name: Deploy User Service

on:
  push:
    branches: [main, integration]
    paths:
      - 'services/user-service/**'
      - '.github/workflows/deploy-user-service.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ap-southeast-1
  SERVICE_PATH: services/user-service

jobs:
  # Job 1: Build (Runs automatically on push)
  build:
    name: Build Application
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Minimal permissions for build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: 'maven'
      
      - name: Build with Maven
        run: |
          cd ${{ env.SERVICE_PATH }}
          mvn clean package -DskipTests
      
      - name: Verify JAR exists
        run: |
          if [ ! -f "${{ env.SERVICE_PATH }}/target/user-service-0.0.1-SNAPSHOT.jar" ]; then
            echo "Error: JAR file not found!"
            exit 1
          fi
          ls -lh ${{ env.SERVICE_PATH }}/target/*.jar
          echo "Build completed successfully! ‚úÖ"
      
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: user-service-jar
          path: ${{ env.SERVICE_PATH }}/target/user-service-0.0.1-SNAPSHOT.jar
          retention-days: 7
      
      - name: Build summary
        run: |
          echo "‚úÖ Build completed successfully!"
          echo "üì¶ JAR artifact uploaded"
          echo "üéØ Ready for manual deployment"
          echo ""
          echo "To deploy:"
          echo "1. Go to the 'Actions' tab in GitHub"
          echo "2. Find 'Deploy User Service' workflow"
          echo "3. Click 'Run workflow' on the latest run"
          echo "4. Select environment and click 'Run workflow' button"

  # Job 2: Deploy (Manual trigger only)
  deploy:
    name: Deploy to Elastic Beanstalk
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # Required for OIDC
      contents: read    # Minimal read access
      pull-requests: write  # Optional: for status comments
    
    # Only run on manual workflow_dispatch
    # Remove automatic trigger on push
    if: github.event_name == 'workflow_dispatch' && needs.build.result == 'success'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # SECURITY FIX #1: Use OIDC for AWS credentials
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          # No static credentials needed!
      
      - name: Verify Elastic Beanstalk environment exists
        run: |
          echo "Checking if Elastic Beanstalk environment exists..."
          ENV_STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names banking-buddy-${{ github.event.inputs.environment || 'dev' }}-user-env \
            --region ${{ env.AWS_REGION }} \
            --query 'Environments[0].Status' \
            --output text 2>/dev/null || echo "NotFound")
          
          if [ "$ENV_STATUS" = "NotFound" ] || [ -z "$ENV_STATUS" ] || [ "$ENV_STATUS" = "None" ]; then
            echo "‚ùå Infrastructure does not exist."
            echo "Please provision infrastructure first with: cd infrastructure/terraform && terraform apply"
            exit 1
          elif echo "$ENV_STATUS" | grep -q "Ready\|Updating"; then
            echo "‚úÖ Infrastructure exists and is ready: $ENV_STATUS"
          else
            echo "‚ö†Ô∏è Infrastructure exists but status is: $ENV_STATUS"
            echo "Proceeding with deployment..."
          fi
      
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: user-service-jar
          path: ${{ env.SERVICE_PATH }}/target/
      
      - name: Verify artifact downloaded
        run: |
          if [ ! -f "${{ env.SERVICE_PATH }}/target/user-service-0.0.1-SNAPSHOT.jar" ]; then
            echo "Error: JAR file not found in artifacts!"
            exit 1
          fi
          ls -lh ${{ env.SERVICE_PATH }}/target/*.jar
      
      - name: Deploy to Elastic Beanstalk
        uses: ./.github/actions/deploy-to-eb
        with:
          # SECURITY FIX #2: Pass OIDC credentials (no static secrets)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Only if using fallback
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Only if using fallback
          aws-region: ${{ env.AWS_REGION }}
          application-name: banking-buddy-${{ github.event.inputs.environment || 'dev' }}-user-service
          environment-name: banking-buddy-${{ github.event.inputs.environment || 'dev' }}-user-env
          deployment-package: ${{ env.SERVICE_PATH }}/target/user-service-0.0.1-SNAPSHOT.jar
      
      - name: Verify deployment health
        run: |
          echo "Verifying deployment health..."
          ENV_URL=$(aws elasticbeanstalk describe-environments \
            --environment-names banking-buddy-${{ github.event.inputs.environment || 'dev' }}-user-env \
            --region ${{ env.AWS_REGION }} \
            --query 'Environments[0].CNAME' \
            --output text)
          
          echo "Environment URL: http://${ENV_URL}"
          
          # Wait for service to be healthy (max 5 minutes)
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://${ENV_URL}/actuator/health" || echo "000")
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "‚úÖ Deployment verified! Service is healthy (HTTP $HTTP_CODE)"
              exit 0
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
            echo "‚è≥ Attempt $ATTEMPT/$MAX_ATTEMPTS: Waiting for service to be healthy (HTTP $HTTP_CODE)..."
            sleep 10
          done
          
          echo "‚ùå Deployment verification failed after $MAX_ATTEMPTS attempts"
          echo "Service may still be starting up or may have issues"
          echo "Check the Elastic Beanstalk environment for details"
          exit 1
      
      - name: Get environment URL
        run: |
          ENV_URL=$(aws elasticbeanstalk describe-environments \
            --environment-names banking-buddy-${{ github.event.inputs.environment || 'dev' }}-user-env \
            --region ${{ env.AWS_REGION }} \
            --query 'Environments[0].CNAME' \
            --output text)
          echo "üöÄ Deployment completed successfully!"
          echo "üìç Environment URL: http://${ENV_URL}"
          echo "üè• Health check: http://${ENV_URL}/actuator/health"
          echo ""
          echo "Test the deployment:"
          echo "curl http://${ENV_URL}/actuator/health"